{"repository_name":"redis","body":"# redis\n\nA pure-Crystal implementation of the Redis protocol\n\n## Installation\n\n1. Add the dependency to your `shard.yml`:\n\n   ```yaml\n   dependencies:\n     redis:\n       github: jgaskins/redis\n   ```\n\n   Note that this shard currently depends on a fork of `crystal-db` for its connection pool. I'm in the process of getting those changes merged upstream so it can depend on the mainline implementation of that shard.\n\n2. Run `shards`\n\n## Usage\n\n```crystal\nrequire \"redis\"\n\nredis = Redis::Client.new # Defaults to `localhost` port 6379\n\nredis.set \"foo\", \"bar\"\nredis.get \"foo\" # => \"bar\"\n\nredis.incr \"counter\" # => 1\nredis.incr \"counter\" # => 2\nredis.decr \"counter\" # => 1\n\nredis.del \"foo\", \"counter\" # => 2\n```\n\nTo use a Redis server that isn't at `localhost:6379`, pass a `URI` to the client. For example, if you store it in your shell environment:\n\n```crystal\nredis = Redis::Client.new(URI.parse(ENV[\"REDIS_URL\"]))\n```\n\nTo connect via SSL, make sure you use the `rediss://` URL scheme. If your Redis server requires a password or uses a different database slot than `0`, make sure you include them in the URL:\n\n```crystal\nredis = Redis::Client.new(URI.parse(\"rediss://:my_password@example.com/3\"))\n```\n\n### Connection Pool\n\nThe `Redis::Client` maintains its own connection pool, so there is no need to run your own within your application. When you execute a command on the `Redis::Client`, it is automatically being executed against a connection. When you execute a pipeline or transaction with `multi`, all commands within that block will automatically be routed to the same connection.\n\n## Development\n\nMake sure you have a Redis or KeyDB server running locally on port 6379.\n\n## Contributing\n\n1. Fork it (<https://github.com/jgaskins/redis/fork>)\n2. Create your feature branch (`git checkout -b my-new-feature`)\n3. Commit your changes (`git commit -am 'Add some feature'`)\n4. Push to the branch (`git push origin my-new-feature`)\n5. Create a new Pull Request\n\n## Contributors\n\n- [Jamie Gaskins](https://github.com/jgaskins) - creator and maintainer\n","program":{"html_id":"redis/toplevel","path":"toplevel.html","kind":"module","full_name":"Top Level Namespace","name":"Top Level Namespace","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"redis","program":true,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"redis/Redis","path":"Redis.html","kind":"module","full_name":"Redis","name":"Redis","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"redis","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":null,"doc":null,"summary":null,"class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[{"html_id":"redis/Redis/Client","path":"Redis/Client.html","kind":"class","full_name":"Redis::Client","name":"Client","abstract":false,"superclass":{"html_id":"redis/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"redis/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"redis/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"redis","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"redis/Redis","kind":"module","full_name":"Redis","name":"Redis"},"doc":"The Redis client is the expected entrypoint for this shard. By default, it will connect to localhost:6379, but you can also supply a `URI` to connect to an arbitrary Redis server. SSL, password authentication, and DB selection are all supported.\n\n```\n# Connects to localhost:6379\nredis = Redis::Client.new\n\n# Connects to a server at \"redis.example.com\" on port 6000 over a TLS\n# connection, authenticates with the password \"password\", and uses DB 3\nredis = Redis::Client.new(URI.parse(\"rediss://:password@redis.example.com:6000/3\"))\n\n# Connects to a server at the URL in `ENV[\"REDIS_URL\"]`\nredis = Redis::Client.from_env(\"REDIS_URL\")\n```","summary":"<p>The Redis client is the expected entrypoint for this shard.</p>","class_methods":[{"id":"from_env(env_var)-class-method","html_id":"from_env(env_var)-class-method","name":"from_env","doc":null,"summary":null,"abstract":false,"args":[{"name":"env_var","doc":null,"default_value":"","external_name":"env_var","restriction":""}],"args_string":"(env_var)","source_link":null,"def":{"name":"from_env","args":[{"name":"env_var","doc":null,"default_value":"","external_name":"env_var","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"new(URI.parse(ENV[env_var]))"}}],"constructors":[{"id":"new(*args,**kwargs)-class-method","html_id":"new(*args,**kwargs)-class-method","name":"new","doc":"The client holds a pool of connections that expands and contracts as\nneeded.","summary":"<p>The client holds a pool of connections that expands and contracts as needed.</p>","abstract":false,"args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"args_string":"(*args, **kwargs)","source_link":null,"def":{"name":"new","args":[{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":""}],"double_splat":{"name":"kwargs","doc":null,"default_value":"","external_name":"kwargs","restriction":""},"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(*args, **kwargs)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[],"macros":[{"id":"method_missing(call)-macro","html_id":"method_missing(call)-macro","name":"method_missing","doc":"All Redis commands invoked on the client check out a connection from the\nconnection pool, invoke the command on that connection, and then check the\nconnection back into the pool.\n\n```\nredis = Redis::Client.new\n```","summary":"<p>All Redis commands invoked on the client check out a connection from the connection pool, invoke the command on that connection, and then check the connection back into the pool.</p>","abstract":false,"args":[{"name":"call","doc":null,"default_value":"","external_name":"call","restriction":""}],"args_string":"(call)","source_link":null,"def":{"name":"method_missing","args":[{"name":"call","doc":null,"default_value":"","external_name":"call","restriction":""}],"double_splat":null,"splat_index":null,"block_arg":null,"visibility":"Public","body":"      @pool.checkout do |connection|\n        connection.\n{{ call }}\n\n      \nend\n    \n"}}],"types":[]},{"html_id":"redis/Redis/Commands","path":"Redis/Commands.html","kind":"module","full_name":"Redis::Commands","name":"Commands","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"redis","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[{"html_id":"redis/Redis/Connection","kind":"class","full_name":"Redis::Connection","name":"Connection"},{"html_id":"redis/Redis/Pipeline","kind":"class","full_name":"Redis::Pipeline","name":"Pipeline"},{"html_id":"redis/Redis/Transaction","kind":"class","full_name":"Redis::Transaction","name":"Transaction"}],"namespace":{"html_id":"redis/Redis","kind":"module","full_name":"Redis","name":"Redis"},"doc":"All Redis commands are defined in this module. Any paradigm that needs to\nuse these commands simply overrides `run`, which takes a single `command`\nobject, which must be an `Enumerable`.\n\nTODO: Add more Redis commands from https://redis.io/commands","summary":"<p>All Redis commands are defined in this module.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"brpop(*keys:String,timeout:Time::Span)-instance-method","html_id":"brpop(*keys:String,timeout:Time::Span)-instance-method","name":"brpop","doc":"Remove and return an element from the end of the given list. If the list\nis empty or the key does not exist, this method waits the specified amount\nof time for an element to be added to it by another connection. If the\nelement *is* added by another connection within that amount of time, this\nmethod will return it immediately. If it *is not*, then this method returns\n`nil`.\n\n```\nredis.lpush \"foo\", \"hello\"\nredis.rpop \"foo\" # => \"hello\"\nredis.rpop \"foo\" # => nil\n```","summary":"<p>Remove and return an element from the end of the given list.</p>","abstract":false,"args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"String"},{"name":"timeout","doc":null,"default_value":"","external_name":"timeout","restriction":"Time::Span"}],"args_string":"(*keys : String, timeout : Time::Span)","source_link":null,"def":{"name":"brpop","args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"String"},{"name":"timeout","doc":null,"default_value":"","external_name":"timeout","restriction":"Time::Span"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"brpop(*keys, timeout: timeout.total_seconds)"}},{"id":"brpop(*keys:String,timeout:Int|Float)-instance-method","html_id":"brpop(*keys:String,timeout:Int|Float)-instance-method","name":"brpop","doc":"Remove and return an element from the end of the given list. If the list\nis empty or the key does not exist, this method waits the specified number\nof seconds for an element to be added to it by another connection. If the\nelement *is* added by another connection within that number of seconds,\nthis method will return it immediately. If it *is not*, then this method\nreturns `nil`.\n\n```\nredis.lpush \"foo\", \"hello\"\nredis.rpop \"foo\" # => \"hello\"\nredis.rpop \"foo\" # => nil\n```","summary":"<p>Remove and return an element from the end of the given list.</p>","abstract":false,"args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"String"},{"name":"timeout","doc":null,"default_value":"","external_name":"timeout","restriction":"Int | Float"}],"args_string":"(*keys : String, timeout : Int | Float)","source_link":null,"def":{"name":"brpop","args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"String"},{"name":"timeout","doc":null,"default_value":"","external_name":"timeout","restriction":"Int | Float"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if timeout == timeout.to_i\n  timeout = timeout.to_i\nend\nbrpop(*keys, timeout: timeout.to_s)\n"}},{"id":"brpop(*keys:String,timeout:String)-instance-method","html_id":"brpop(*keys:String,timeout:String)-instance-method","name":"brpop","doc":"Remove and return an element from the end of the given list. If the list\nis empty or the key does not exist, this method waits the specified number\nof seconds for an element to be added to it by another connection. If the\nelement *is* added by another connection within that number of seconds,\nthis method will return it immediately. If it *is not*, then this method\nreturns `nil`.\n\n```\nredis.lpush \"foo\", \"hello\"\nredis.rpop \"foo\" # => \"hello\"\nredis.rpop \"foo\" # => nil\n```","summary":"<p>Remove and return an element from the end of the given list.</p>","abstract":false,"args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"String"},{"name":"timeout","doc":null,"default_value":"","external_name":"timeout","restriction":"String"}],"args_string":"(*keys : String, timeout : String)","source_link":null,"def":{"name":"brpop","args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"String"},{"name":"timeout","doc":null,"default_value":"","external_name":"timeout","restriction":"String"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run(({\"brpop\"} + keys) + {timeout})"}},{"id":"decr(key:String)-instance-method","html_id":"decr(key:String)-instance-method","name":"decr","doc":"Atomically decrement and return the integer value for the specified key,\ncreating it if it does not exist\n\n```\nredis.del \"counter\"\nredis.decr \"counter\" # => -1\n```","summary":"<p>Atomically decrement and return the integer value for the specified key, creating it if it does not exist</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"args_string":"(key : String)","source_link":null,"def":{"name":"decr","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run({\"decr\", key})"}},{"id":"decrby(key:String,amount:Int|String)-instance-method","html_id":"decrby(key:String,amount:Int|String)-instance-method","name":"decrby","doc":"Atomically decrement and return the integer value for the specified key by\nthe specified amount, creating it if it does not exist\n\n```\nredis.del \"counter\"\nredis.decrby \"counter\", 2 # => -2\n```","summary":"<p>Atomically decrement and return the integer value for the specified key by the specified amount, creating it if it does not exist</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"amount","doc":null,"default_value":"","external_name":"amount","restriction":"Int | String"}],"args_string":"(key : String, amount : Int | String)","source_link":null,"def":{"name":"decrby","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"amount","doc":null,"default_value":"","external_name":"amount","restriction":"Int | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run({\"decrby\", key, amount.to_s})"}},{"id":"del(*keys:String)-instance-method","html_id":"del(*keys:String)-instance-method","name":"del","doc":"Delete all specified keys and return the number of keys deleted.\n\n```\nredis.set \"foo\"\nredis.del \"foo\", \"bar\" # => 1\nredis.del \"foo\", \"bar\" # => 0\n```","summary":"<p>Delete all specified keys and return the number of keys deleted.</p>","abstract":false,"args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"String"}],"args_string":"(*keys : String)","source_link":null,"def":{"name":"del","args":[{"name":"keys","doc":null,"default_value":"","external_name":"keys","restriction":"String"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run({\"del\"} + keys)"}},{"id":"get(key:String)-instance-method","html_id":"get(key:String)-instance-method","name":"get","doc":"Get the value for the specified key\n\n```\nredis.set \"foo\", \"bar\"\nredis.get(\"foo\") # => \"bar\"\n```","summary":"<p>Get the value for the specified key</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"args_string":"(key : String)","source_link":null,"def":{"name":"get","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run({\"get\", key})"}},{"id":"incr(key:String)-instance-method","html_id":"incr(key:String)-instance-method","name":"incr","doc":"Atomically increment and return the integer value for the specified key,\ncreating it if it does not exist\n\n```\nredis.del \"counter\"\nredis.incr \"counter\" # => 1\n```","summary":"<p>Atomically increment and return the integer value for the specified key, creating it if it does not exist</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"args_string":"(key : String)","source_link":null,"def":{"name":"incr","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run({\"incr\", key})"}},{"id":"incrby(key:String,amount:Int|String)-instance-method","html_id":"incrby(key:String,amount:Int|String)-instance-method","name":"incrby","doc":"Atomically increment and return the integer value for the specified key by\nthe specified amount, creating it if it does not exist\n\n```\nredis.del \"counter\"\nredis.incrby \"counter\", 2 # => 2\n```","summary":"<p>Atomically increment and return the integer value for the specified key by the specified amount, creating it if it does not exist</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"amount","doc":null,"default_value":"","external_name":"amount","restriction":"Int | String"}],"args_string":"(key : String, amount : Int | String)","source_link":null,"def":{"name":"incrby","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"amount","doc":null,"default_value":"","external_name":"amount","restriction":"Int | String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run({\"incrby\", key, amount.to_s})"}},{"id":"keys(pattern=&quot;*&quot;)-instance-method","html_id":"keys(pattern=&quot;*&quot;)-instance-method","name":"keys","doc":"Get the keys whose names follow the specified glob pattern. If a pattern\nis not specified, it will return all keys by default. Be careful when\nusing this command on Redis servers with a lot of traffic and millions\nof keys.\n\n```\nredis.keys # => [\"foo\", \"bar\", \"baz\"]\nredis.keys(\"f*\") # => [\"foo\"]\nredis.keys(\"b*\") # => [\"bar\", \"baz\"]\n```","summary":"<p>Get the keys whose names follow the specified glob pattern.</p>","abstract":false,"args":[{"name":"pattern","doc":null,"default_value":"\"*\"","external_name":"pattern","restriction":""}],"args_string":"(pattern = <span class=\"s\">&quot;*&quot;</span>)","source_link":null,"def":{"name":"keys","args":[{"name":"pattern","doc":null,"default_value":"\"*\"","external_name":"pattern","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run({\"keys\", pattern})"}},{"id":"lpush(key,*values)-instance-method","html_id":"lpush(key,*values)-instance-method","name":"lpush","doc":"Insert an item at the beginning of a list, returning the number of items\nin the list after the insert.\n\n```\nredis.del \"my-list\" # Delete so we know it's empty\nredis.lpush \"my-list\", \"foo\", \"bar\" # => 2\nredis.lpush \"my-list\", \"foo\", \"bar\" # => 4\n```","summary":"<p>Insert an item at the beginning of a list, returning the number of items in the list after the insert.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"args_string":"(key, *values)","source_link":null,"def":{"name":"lpush","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":""},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":""}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run({\"lpush\", key} + values)"}},{"id":"publish(channel:String,message:String)-instance-method","html_id":"publish(channel:String,message:String)-instance-method","name":"publish","doc":null,"summary":null,"abstract":false,"args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"String"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"args_string":"(channel : String, message : String)","source_link":null,"def":{"name":"publish","args":[{"name":"channel","doc":null,"default_value":"","external_name":"channel","restriction":"String"},{"name":"message","doc":null,"default_value":"","external_name":"message","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run({\"publish\", channel, message})"}},{"id":"rpop(key:String)-instance-method","html_id":"rpop(key:String)-instance-method","name":"rpop","doc":"Remove and return an element from the end of the given list. If the list\nis empty or the key does not exist, this method returns `nil`\n\n```\nredis.lpush \"foo\", \"hello\"\nredis.rpop \"foo\" # => \"hello\"\nredis.rpop \"foo\" # => nil\n```","summary":"<p>Remove and return an element from the end of the given list.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"args_string":"(key : String)","source_link":null,"def":{"name":"rpop","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run({\"rpop\", key})"}},{"id":"rpoplpush(source:String,destination:String)-instance-method","html_id":"rpoplpush(source:String,destination:String)-instance-method","name":"rpoplpush","doc":"Atomically remove an item from the end of a list and insert it at the\nbeginning of another. Returns that list item. If the first list is empty,\nnothing happens and this method returns `nil`.\n\n```\nredis.del \"foo\"\nredis.lpush \"foo\", \"hello\", \"world\"\nredis.rpoplpush \"foo\", \"bar\" # => \"hello\"\nredis.rpoplpush \"foo\", \"bar\" # => \"world\"\nredis.rpoplpush \"foo\", \"bar\" # => nil\n```","summary":"<p>Atomically remove an item from the end of a list and insert it at the beginning of another.</p>","abstract":false,"args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":"String"},{"name":"destination","doc":null,"default_value":"","external_name":"destination","restriction":"String"}],"args_string":"(source : String, destination : String)","source_link":null,"def":{"name":"rpoplpush","args":[{"name":"source","doc":null,"default_value":"","external_name":"source","restriction":"String"},{"name":"destination","doc":null,"default_value":"","external_name":"destination","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run({\"rpoplpush\", source, destination})"}},{"id":"run(command)-instance-method","html_id":"run(command)-instance-method","name":"run","doc":"Execute the given command and return the result from the server. Commands\nmust be an `Enumerable` and its `size` method must be re-entrant.\n\n```\nrun({\"set\", \"foo\", \"bar\"})\n```","summary":"<p>Execute the given command and return the result from the server.</p>","abstract":true,"args":[{"name":"command","doc":null,"default_value":"","external_name":"command","restriction":""}],"args_string":"(command)","source_link":null,"def":{"name":"run","args":[{"name":"command","doc":null,"default_value":"","external_name":"command","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":""}},{"id":"sadd(key:String,*values:String)-instance-method","html_id":"sadd(key:String,*values:String)-instance-method","name":"sadd","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"String"}],"args_string":"(key : String, *values : String)","source_link":null,"def":{"name":"sadd","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"String"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run({\"sadd\", key} + values)"}},{"id":"scard(key:String)-instance-method","html_id":"scard(key:String)-instance-method","name":"scard","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"args_string":"(key : String)","source_link":null,"def":{"name":"scard","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run({\"scard\", key})"}},{"id":"sdiff(first:String,second:String)-instance-method","html_id":"sdiff(first:String,second:String)-instance-method","name":"sdiff","doc":null,"summary":null,"abstract":false,"args":[{"name":"first","doc":null,"default_value":"","external_name":"first","restriction":"String"},{"name":"second","doc":null,"default_value":"","external_name":"second","restriction":"String"}],"args_string":"(first : String, second : String)","source_link":null,"def":{"name":"sdiff","args":[{"name":"first","doc":null,"default_value":"","external_name":"first","restriction":"String"},{"name":"second","doc":null,"default_value":"","external_name":"second","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run({\"sdiff\", first, second})"}},{"id":"set(key:String,value:String,ex=nil,px=nil,nx=false,xx=false,keepttl=false):Nil-instance-method","html_id":"set(key:String,value:String,ex=nil,px=nil,nx=false,xx=false,keepttl=false):Nil-instance-method","name":"set","doc":"Set a given key to a given value, optionally specifying time-to-live (TTL).\n\n- `ex`: TTL in seconds (mnemonic: \"ex\" = \"expiration\")\n- `px`: TTL in milliseconds\n- `nx`: Only set this key if it does not exist (mnemonic: \"nx\" = it does \"not exist\")\n- `xx`: only set this key if it does exist (mnemonic: \"xx\" = it \"exists exists\" — look, I don't make the rules)\n- `keepttl`: If there is a TTL already set on the key, retain that TTL instead of overwriting it\n\n```\nredis.set \"foo\", \"bar\", ex: 1\nredis.get(\"foo\") # => \"bar\"\nsleep 1.second\nredis.get(\"foo\") # => nil\n```","summary":"<p>Set a given key to a given value, optionally specifying time-to-live (TTL).</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"ex","doc":null,"default_value":"nil","external_name":"ex","restriction":""},{"name":"px","doc":null,"default_value":"nil","external_name":"px","restriction":""},{"name":"nx","doc":null,"default_value":"false","external_name":"nx","restriction":""},{"name":"xx","doc":null,"default_value":"false","external_name":"xx","restriction":""},{"name":"keepttl","doc":null,"default_value":"false","external_name":"keepttl","restriction":""}],"args_string":"(key : String, value : String, ex = <span class=\"n\">nil</span>, px = <span class=\"n\">nil</span>, nx = <span class=\"n\">false</span>, xx = <span class=\"n\">false</span>, keepttl = <span class=\"n\">false</span>) : Nil","source_link":null,"def":{"name":"set","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"},{"name":"ex","doc":null,"default_value":"nil","external_name":"ex","restriction":""},{"name":"px","doc":null,"default_value":"nil","external_name":"px","restriction":""},{"name":"nx","doc":null,"default_value":"false","external_name":"nx","restriction":""},{"name":"xx","doc":null,"default_value":"false","external_name":"xx","restriction":""},{"name":"keepttl","doc":null,"default_value":"false","external_name":"keepttl","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"command = {\"set\", key, value}\nif ex\n  command = command + {\"ex\", ex.to_s}\nend\nif px\n  command = command + {\"px\", px.to_s}\nend\nif nx\n  command = command + {\"nx\"}\nend\nif xx\n  command = command + {\"xx\"}\nend\nif keepttl\n  command = command + {\"keepttl\"}\nend\nrun(command)\n"}},{"id":"sinter(first:String,*others:String)-instance-method","html_id":"sinter(first:String,*others:String)-instance-method","name":"sinter","doc":null,"summary":null,"abstract":false,"args":[{"name":"first","doc":null,"default_value":"","external_name":"first","restriction":"String"},{"name":"others","doc":null,"default_value":"","external_name":"others","restriction":"String"}],"args_string":"(first : String, *others : String)","source_link":null,"def":{"name":"sinter","args":[{"name":"first","doc":null,"default_value":"","external_name":"first","restriction":"String"},{"name":"others","doc":null,"default_value":"","external_name":"others","restriction":"String"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run({\"sinter\", first} + others)"}},{"id":"sismember(key:String,value:String)-instance-method","html_id":"sismember(key:String,value:String)-instance-method","name":"sismember","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"args_string":"(key : String, value : String)","source_link":null,"def":{"name":"sismember","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run({\"sismember\", key, value})"}},{"id":"smembers(key:String)-instance-method","html_id":"smembers(key:String)-instance-method","name":"smembers","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"args_string":"(key : String)","source_link":null,"def":{"name":"smembers","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run({\"smembers\", key})"}},{"id":"srem(key:String,*values:String)-instance-method","html_id":"srem(key:String,*values:String)-instance-method","name":"srem","doc":null,"summary":null,"abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"String"}],"args_string":"(key : String, *values : String)","source_link":null,"def":{"name":"srem","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"values","doc":null,"default_value":"","external_name":"values","restriction":"String"}],"double_splat":null,"splat_index":1,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run({\"srem\", key} + values)"}},{"id":"xadd(key:String,id:String,maxlen,data:Hash(String,String))-instance-method","html_id":"xadd(key:String,id:String,maxlen,data:Hash(String,String))-instance-method","name":"xadd","doc":"Append an entry with the specified data to the stream with the given `key`\nand gives it the specified `id`. If the id is `\"*\"`, Redis will assign it\nan id of the form `\"#{Time.utc.to_unix_ms}-#{autoincrementing_index}\"`.\nIf `maxlen` is provided, Redis will trim the stream to the specified\nlength. If `maxlen` is of the form `~ 1000`, Redis will trim it to\n*approximately* that length, removing entries when it can do so\nefficiently. This method returns the `id` that Redis stores.\n\n```\nredis.xadd \"my-stream\", \"*\", {\"name\" => \"foo\", \"id\" => UUID.random.to_s}\n```","summary":"<p>Append an entry with the specified data to the stream with the given <code>key</code> and gives it the specified <code>id</code>.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"},{"name":"maxlen","doc":null,"default_value":"","external_name":"maxlen","restriction":""},{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Hash(String, String)"}],"args_string":"(key : String, id : String, maxlen, data : Hash(String, String))","source_link":null,"def":{"name":"xadd","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"},{"name":"maxlen","doc":null,"default_value":"","external_name":"maxlen","restriction":""},{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Hash(String, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"command = Array(Value).new(initial_capacity: (data.size * 2) + 3)\n(command << \"xadd\") << key\nif maxlen\n  (command << \"maxlen\") << maxlen\nend\ncommand << id\ndata.each do |key, value|\n  (command << key) << value\nend\nrun(command)\n"}},{"id":"xadd(key:String,id:String,data:Hash(String,String))-instance-method","html_id":"xadd(key:String,id:String,data:Hash(String,String))-instance-method","name":"xadd","doc":"Append an entry with the specified data to the stream with the given `key`\nand gives it the specified `id`. If the id is `\"*\"`, Redis will assign it\nan id of the form `\"#{Time.utc.to_unix_ms}-#{autoincrementing_index}\"`.\nIf `maxlen` is provided, Redis will trim the stream to the specified\nlength. If `maxlen` is of the form `~ 1000`, Redis will trim it to\n*approximately* that length, removing entries when it can do so\nefficiently. This method returns the `id` that Redis stores.\n\n```\nredis.xadd \"my-stream\", \"*\", {\"name\" => \"foo\", \"id\" => UUID.random.to_s}\n```","summary":"<p>Append an entry with the specified data to the stream with the given <code>key</code> and gives it the specified <code>id</code>.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"},{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Hash(String, String)"}],"args_string":"(key : String, id : String, data : Hash(String, String))","source_link":null,"def":{"name":"xadd","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"},{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":"Hash(String, String)"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"xadd(key, id, maxlen: nil, data: data)"}},{"id":"xadd(key:String,id:String,maxlen=nil,**data)-instance-method","html_id":"xadd(key:String,id:String,maxlen=nil,**data)-instance-method","name":"xadd","doc":"Append an entry with the specified data to the stream with the given `key`\nand gives it the specified `id`. If the id is `\"*\"`, Redis will assign it\nan id of the form `\"#{Time.utc.to_unix_ms}-#{autoincrementing_index}\"`.\nIf `maxlen` is provided, Redis will trim the stream to the specified\nlength. If `maxlen` is of the form `~ 1000`, Redis will trim it to\n*approximately* that length, removing entries when it can do so\nefficiently. This method returns the `id` that Redis stores.\n\n```\nredis.xadd \"my-stream\", \"*\", name: \"foo\", id: UUID.random.to_s\n```","summary":"<p>Append an entry with the specified data to the stream with the given <code>key</code> and gives it the specified <code>id</code>.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"},{"name":"maxlen","doc":null,"default_value":"nil","external_name":"maxlen","restriction":""}],"args_string":"(key : String, id : String, maxlen = <span class=\"n\">nil</span>, **data)","source_link":null,"def":{"name":"xadd","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"id","doc":null,"default_value":"","external_name":"id","restriction":"String"},{"name":"maxlen","doc":null,"default_value":"nil","external_name":"maxlen","restriction":""}],"double_splat":{"name":"data","doc":null,"default_value":"","external_name":"data","restriction":""},"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"command = Array(Value).new(initial_capacity: (data.size * 2) + 5)\n(command << \"xadd\") << key\nif maxlen\n  (command << \"maxlen\") << maxlen\nend\ncommand << id\ndata.each do |key, value|\n  (command << key.to_s) << value\nend\nrun(command)\n"}},{"id":"xgroup(command:String,key:String,groupname:String)-instance-method","html_id":"xgroup(command:String,key:String,groupname:String)-instance-method","name":"xgroup","doc":"Run a Redis XGROUP subcommand for a given stream. See the [XGROUP command in the Redis documentation](https://redis.io/commands/xgroup) for more information.\n\n```\nredis.xgroup \"DESTROY\", \"my-stream\", \"my-group\"\n```","summary":"<p>Run a Redis XGROUP subcommand for a given stream.</p>","abstract":false,"args":[{"name":"command","doc":null,"default_value":"","external_name":"command","restriction":"String"},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"groupname","doc":null,"default_value":"","external_name":"groupname","restriction":"String"}],"args_string":"(command : String, key : String, groupname : String)","source_link":null,"def":{"name":"xgroup","args":[{"name":"command","doc":null,"default_value":"","external_name":"command","restriction":"String"},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"groupname","doc":null,"default_value":"","external_name":"groupname","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run({\"xgroup\", command, key, groupname})"}},{"id":"xgroup(command:String,key:String,groupname:String,*args:String)-instance-method","html_id":"xgroup(command:String,key:String,groupname:String,*args:String)-instance-method","name":"xgroup","doc":"Run a Redis XGROUP subcommand for a given stream. See the [XGROUP command in the Redis documentation](https://redis.io/commands/xgroup) for more information.\n\n```\nredis.xgroup \"CREATE\", \"my-stream\", \"my-group\", \"0\"\n```","summary":"<p>Run a Redis XGROUP subcommand for a given stream.</p>","abstract":false,"args":[{"name":"command","doc":null,"default_value":"","external_name":"command","restriction":"String"},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"groupname","doc":null,"default_value":"","external_name":"groupname","restriction":"String"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"String"}],"args_string":"(command : String, key : String, groupname : String, *args : String)","source_link":null,"def":{"name":"xgroup","args":[{"name":"command","doc":null,"default_value":"","external_name":"command","restriction":"String"},{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"groupname","doc":null,"default_value":"","external_name":"groupname","restriction":"String"},{"name":"args","doc":null,"default_value":"","external_name":"args","restriction":"String"}],"double_splat":null,"splat_index":3,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run({\"xgroup\", command, key, groupname} + args)"}},{"id":"xlen(key:String)-instance-method","html_id":"xlen(key:String)-instance-method","name":"xlen","doc":"Return the number of entries in the given stream","summary":"<p>Return the number of entries in the given stream</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"args_string":"(key : String)","source_link":null,"def":{"name":"xlen","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"run({\"xlen\", key})"}},{"id":"xrange(key:String,startmin,endmax,count=nil)-instance-method","html_id":"xrange(key:String,startmin,endmax,count=nil)-instance-method","name":"xrange","doc":"Return the entries in the given stream between the `start` and `end` ids.\nIf `count` is provided, Redis will return only that number of entries.","summary":"<p>Return the entries in the given stream between the <code>start</code> and <code>end</code> ids.</p>","abstract":false,"args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"min","doc":null,"default_value":"","external_name":"start","restriction":""},{"name":"max","doc":null,"default_value":"","external_name":"end","restriction":""},{"name":"count","doc":null,"default_value":"nil","external_name":"count","restriction":""}],"args_string":"(key : String, start min, end max, count = <span class=\"n\">nil</span>)","source_link":null,"def":{"name":"xrange","args":[{"name":"key","doc":null,"default_value":"","external_name":"key","restriction":"String"},{"name":"min","doc":null,"default_value":"","external_name":"start","restriction":""},{"name":"max","doc":null,"default_value":"","external_name":"end","restriction":""},{"name":"count","doc":null,"default_value":"nil","external_name":"count","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"command = {\"xrange\", key, min, max}\nif count\n  command = command + {\"count\", count}\nend\nrun(command)\n"}},{"id":"xreadgroup(group:String,consumer:String,count:String|Int|Nil=nil,streams:NamedTuple=NamedTuple.new)-instance-method","html_id":"xreadgroup(group:String,consumer:String,count:String|Int|Nil=nil,streams:NamedTuple=NamedTuple.new)-instance-method","name":"xreadgroup","doc":"Execute an `XREADGROUP` command on the Redis server.\n\nTODO: Make the return value of this command easier to work with. Nested\nheterogeneous arrays aren't easy to work with.","summary":"<p>Execute an <code>XREADGROUP</code> command on the Redis server.</p>","abstract":false,"args":[{"name":"group","doc":null,"default_value":"","external_name":"group","restriction":"String"},{"name":"consumer","doc":null,"default_value":"","external_name":"consumer","restriction":"String"},{"name":"count","doc":null,"default_value":"nil","external_name":"count","restriction":"String | Int | Nil"},{"name":"streams","doc":null,"default_value":"NamedTuple.new","external_name":"streams","restriction":"NamedTuple"}],"args_string":"(group : String, consumer : String, count : String | Int | Nil = <span class=\"n\">nil</span>, streams : NamedTuple = <span class=\"t\">NamedTuple</span>.<span class=\"k\">new</span>)","source_link":null,"def":{"name":"xreadgroup","args":[{"name":"group","doc":null,"default_value":"","external_name":"group","restriction":"String"},{"name":"consumer","doc":null,"default_value":"","external_name":"consumer","restriction":"String"},{"name":"count","doc":null,"default_value":"nil","external_name":"count","restriction":"String | Int | Nil"},{"name":"streams","doc":null,"default_value":"NamedTuple.new","external_name":"streams","restriction":"NamedTuple"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"command = Array(Value).new(initial_capacity: 7 + (streams.size * 2))\n(((command << \"xreadgroup\") << \"group\") << group) << consumer\nif count\n  (command << \"count\") << count\nend\ncommand << \"streams\"\nstreams.each do |key, value|\n  (command << key.to_s) << value\nend\nrun(command)\n"}}],"macros":[],"types":[]},{"html_id":"redis/Redis/Connection","path":"Redis/Connection.html","kind":"class","full_name":"Redis::Connection","name":"Connection","abstract":false,"superclass":{"html_id":"redis/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"redis/Redis/Commands","kind":"module","full_name":"Redis::Commands","name":"Commands"},{"html_id":"redis/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"redis/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"redis","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[{"id":"CRLF","name":"CRLF","value":"\"\\r\\n\"","doc":null,"summary":null}],"included_modules":[{"html_id":"redis/Redis/Commands","kind":"module","full_name":"Redis::Commands","name":"Commands"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"redis/Redis","kind":"module","full_name":"Redis","name":"Redis"},"doc":"The connection wraps the TCP connection to the Redis server.","summary":"<p>The connection wraps the TCP connection to the Redis server.</p>","class_methods":[],"constructors":[{"id":"new(uri=URI.parse(&quot;redis:///&quot;))-class-method","html_id":"new(uri=URI.parse(&quot;redis:///&quot;))-class-method","name":"new","doc":"We receive all connection information in the URI.\n\nSSL connections require specifying the `rediss://` scheme.\nPassword authentication uses the URI password.\nDB selection uses the URI path.","summary":"<p>We receive all connection information in the URI.</p>","abstract":false,"args":[{"name":"uri","doc":null,"default_value":"URI.parse(\"redis:///\")","external_name":"uri","restriction":""}],"args_string":"(uri = <span class=\"t\">URI</span>.parse(<span class=\"s\">&quot;redis:///&quot;</span>))","source_link":null,"def":{"name":"new","args":[{"name":"uri","doc":null,"default_value":"URI.parse(\"redis:///\")","external_name":"uri","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(uri)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"close-instance-method","html_id":"close-instance-method","name":"close","doc":"Close the connection to the server.","summary":"<p>Close the connection to the server.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"close","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@socket.close"}},{"id":"flush-instance-method","html_id":"flush-instance-method","name":"flush","doc":"Flush the connection buffer and make sure we've sent everything to the\nserver.","summary":"<p>Flush the connection buffer and make sure we've sent everything to the server.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"flush","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@socket.flush"}},{"id":"multi(&)-instance-method","html_id":"multi(&)-instance-method","name":"multi","doc":"Execute a transaction within the server. The transaction is automatically\ncommitted at the end of the block or can be rolled back with\n`Transaction#discard`. Transactions are also rolled back if an exception\nis raised.\n\n```\nredis.multi do |redis|\n  redis.set \"foo\", \"bar\"\n  redis.incr \"counter\"\n  raise \"Oops!\"\nend\n\nredis.get \"foo\" # => nil\nredis.get \"counter\" # => nil\n```","summary":"<p>Execute a transaction within the server.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":null,"def":{"name":"multi","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"txn = Transaction.new(self)\nbegin\n  txn.start!\n  yield txn\n  if txn.discarded?\n    [] of Value\n  else\n    txn.exec.as(Array)\n  end\nrescue ex\n  txn.discard\n  raise(ex)\nend\n"}},{"id":"pipeline(&)-instance-method","html_id":"pipeline(&)-instance-method","name":"pipeline","doc":"Execute a pipeline of commands. A pipeline sends all commands to the\nserver before reading any of the results.\n\n```\nredis.pipeline do |redis|\n  redis.set \"foo\", \"bar\"\n  redis.incr \"counter\"\nend\n```","summary":"<p>Execute a pipeline of commands.</p>","abstract":false,"args":[],"args_string":"(&)","source_link":null,"def":{"name":"pipeline","args":[],"double_splat":null,"splat_index":null,"yields":1,"block_arg":null,"return_type":"","visibility":"Public","body":"pipeline = Pipeline.new(self)\nerror = nil\nbegin\n  yield pipeline\nrescue ex\n  error = ex\nend\n@socket.flush\nresult = pipeline.commit\nif error\n  raise(error)\nelse\n  result\nend\n"}},{"id":"read-instance-method","html_id":"read-instance-method","name":"read","doc":"Read the next value from the server","summary":"<p>Read the next value from the server</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"read","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@parser.read"}},{"id":"run(command)-instance-method","html_id":"run(command)-instance-method","name":"run","doc":"Execute the given command and return the result from the server. Commands must be an `Enumerable`.\n\n```\nrun({\"set\", \"foo\", \"bar\"})\n```","summary":"<p>Execute the given command and return the result from the server.</p>","abstract":false,"args":[{"name":"command","doc":null,"default_value":"","external_name":"command","restriction":""}],"args_string":"(command)","source_link":null,"def":{"name":"run","args":[{"name":"command","doc":null,"default_value":"","external_name":"command","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"encode(command)\n@socket.flush\nread\n"}},{"id":"subscribe(*channels:String,&block:Subscription,self->)-instance-method","html_id":"subscribe(*channels:String,&block:Subscription,self->)-instance-method","name":"subscribe","doc":null,"summary":null,"abstract":false,"args":[{"name":"channels","doc":null,"default_value":"","external_name":"channels","restriction":"String"}],"args_string":"(*channels : String, &block : Subscription, <span class=\"k\">self</span> -> )","source_link":null,"def":{"name":"subscribe","args":[{"name":"channels","doc":null,"default_value":"","external_name":"channels","restriction":"String"}],"double_splat":null,"splat_index":0,"yields":2,"block_arg":{"name":"block","doc":null,"default_value":"","external_name":"block","restriction":"(Subscription, self -> )"},"return_type":"","visibility":"Public","body":"subscription = Subscription.new(self)\nencode({\"subscribe\"} + channels)\nflush\nyield subscription, self\nsubscription.call\n"}},{"id":"unsubscribe(*channels:String)-instance-method","html_id":"unsubscribe(*channels:String)-instance-method","name":"unsubscribe","doc":null,"summary":null,"abstract":false,"args":[{"name":"channels","doc":null,"default_value":"","external_name":"channels","restriction":"String"}],"args_string":"(*channels : String)","source_link":null,"def":{"name":"unsubscribe","args":[{"name":"channels","doc":null,"default_value":"","external_name":"channels","restriction":"String"}],"double_splat":null,"splat_index":0,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"encode({\"unsubscribe\"} + channels)\nflush\n"}}],"macros":[],"types":[]},{"html_id":"redis/Redis/Future","path":"Redis/Future.html","kind":"class","full_name":"Redis::Future","name":"Future","abstract":false,"superclass":{"html_id":"redis/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"redis/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"redis/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"redis","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"redis/Redis","kind":"module","full_name":"Redis","name":"Redis"},"doc":"A `Redis::Future` is what pipelined commands return. They will be resolved\nwith the value of the command that spawned them.","summary":"<p>A <code><a href=\"../Redis/Future.html\">Redis::Future</a></code> is what pipelined commands return.</p>","class_methods":[],"constructors":[],"instance_methods":[{"id":"resolve(value:Value)-instance-method","html_id":"resolve(value:Value)-instance-method","name":"resolve","doc":"Resolves a Future with the supplied Redis::Value","summary":"<p>Resolves a Future with the supplied Redis::Value</p>","abstract":false,"args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Value"}],"args_string":"(value : Value)","source_link":null,"def":{"name":"resolve","args":[{"name":"value","doc":null,"default_value":"","external_name":"value","restriction":"Value"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@resolved = true\n@value = value\n"}},{"id":"resolved?:Bool-instance-method","html_id":"resolved?:Bool-instance-method","name":"resolved?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool","source_link":null,"def":{"name":"resolved?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@resolved"}},{"id":"value-instance-method","html_id":"value-instance-method","name":"value","doc":"Read the value contained in this Future after it is resolved. If this\nmethod is called before the Future is resolved, it will raise a\n`Redis::Future::NotResolved` exception.","summary":"<p>Read the value contained in this Future after it is resolved.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"value","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"if resolved?\n  @value\nelse\n  raise(NotResolved.new(\"Attempted to get the value of an unresolved Redis::Future\"))\nend"}}],"macros":[],"types":[{"html_id":"redis/Redis/Future/NotResolved","path":"Redis/Future/NotResolved.html","kind":"class","full_name":"Redis::Future::NotResolved","name":"NotResolved","abstract":false,"superclass":{"html_id":"redis/Exception","kind":"class","full_name":"Exception","name":"Exception"},"ancestors":[{"html_id":"redis/Exception","kind":"class","full_name":"Exception","name":"Exception"},{"html_id":"redis/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"redis/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"redis","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"redis/Redis/Future","kind":"class","full_name":"Redis::Future","name":"Future"},"doc":"A `Redis::Future::NotResolved` is raised when attempting to access the\nvalue of a `Future` that has not been resolved yet. For example, calling\n`pipeline.get(\"my-key\").value`.","summary":"<p>A <code><a href=\"../../Redis/Future/NotResolved.html\">Redis::Future::NotResolved</a></code> is raised when attempting to access the value of a <code><a href=\"../../Redis/Future.html\">Future</a></code> that has not been resolved yet.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]},{"html_id":"redis/Redis/Parser","path":"Redis/Parser.html","kind":"struct","full_name":"Redis::Parser","name":"Parser","abstract":false,"superclass":{"html_id":"redis/Struct","kind":"struct","full_name":"Struct","name":"Struct"},"ancestors":[{"html_id":"redis/Struct","kind":"struct","full_name":"Struct","name":"Struct"},{"html_id":"redis/Value","kind":"struct","full_name":"Value","name":"Value"},{"html_id":"redis/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"redis","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"redis/Redis","kind":"module","full_name":"Redis","name":"Redis"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(io:IO)-class-method","html_id":"new(io:IO)-class-method","name":"new","doc":"Initialize a parser to read from the given IO","summary":"<p>Initialize a parser to read from the given IO</p>","abstract":false,"args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"args_string":"(io : IO)","source_link":null,"def":{"name":"new","args":[{"name":"io","doc":null,"default_value":"","external_name":"io","restriction":"IO"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(io)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"read:Value-instance-method","html_id":"read:Value-instance-method","name":"read","doc":"Read a `Redis::Value` from the parser's `IO`\n\nExample:\n\n```\nio = IO::Memory.new\nio << \"$3\\r\\n\"\nio << \"foo\\r\\n\"\nio.rewind\n\nParser.new(io).read # => \"foo\"\n```","summary":"<p>Read a <code><a href=\"../Redis/Value.html\">Redis::Value</a></code> from the parser's <code>IO</code></p>","abstract":false,"args":[],"args_string":" : Value","source_link":null,"def":{"name":"read","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Value","visibility":"Public","body":"case byte_marker = @io.read_byte\nwhen ':'\n  parse_int.tap do\n    @io.skip(2)\n  end\nwhen '*'\n  length = parse_int\n  @io.skip(2)\n  Array.new(length) do\n    read\n  end\nwhen '$'\n  length = parse_int\n  @io.skip(2)\n  if length >= 0\n    bytes = Bytes.new(length)\n    @io.read_fully(bytes)\n    value = String.new(bytes)\n    @io.skip(2)\n    value\n  end\nwhen '+'\n  @io.read_line\nwhen '-'\n  raise(@io.read_line)\nwhen nil\n  raise(IO::Error.new(\"Connection closed\"))\nelse\n  raise(\"Invalid byte marker: #{byte_marker.chr.inspect}\")\nend"}}],"macros":[],"types":[]},{"html_id":"redis/Redis/Pipeline","path":"Redis/Pipeline.html","kind":"class","full_name":"Redis::Pipeline","name":"Pipeline","abstract":false,"superclass":{"html_id":"redis/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"redis/Redis/Commands","kind":"module","full_name":"Redis::Commands","name":"Commands"},{"html_id":"redis/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"redis/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"redis","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"redis/Redis/Commands","kind":"module","full_name":"Redis::Commands","name":"Commands"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"redis/Redis","kind":"module","full_name":"Redis","name":"Redis"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(connection:Connection)-class-method","html_id":"new(connection:Connection)-class-method","name":"new","doc":"Wraps a connection so that our `run` and `commit` methods can execute against it.","summary":"<p>Wraps a connection so that our <code><a href=\"../Redis/Pipeline.html#run(command)-instance-method\">#run</a></code> and <code><a href=\"../Redis/Pipeline.html#commit-instance-method\">#commit</a></code> methods can execute against it.</p>","abstract":false,"args":[{"name":"connection","doc":null,"default_value":"","external_name":"connection","restriction":"Connection"}],"args_string":"(connection : Connection)","source_link":null,"def":{"name":"new","args":[{"name":"connection","doc":null,"default_value":"","external_name":"connection","restriction":"Connection"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(connection)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"commit-instance-method","html_id":"commit-instance-method","name":"commit","doc":"Read all of the return values from all of the commands we've sent to Redis\nand resolve all `Redis::Future`s with them in the order they were sent.","summary":"<p>Read all of the return values from all of the commands we've sent to Redis and resolve all <code><a href=\"../Redis/Future.html\">Redis::Future</a></code>s with them in the order they were sent.</p>","abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"commit","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@futures.map(&.resolve(@connection.read))"}},{"id":"run(command)-instance-method","html_id":"run(command)-instance-method","name":"run","doc":"The `run` method is required by the `Commands` mixin. When you run a Redis\ncommand, it gets pushed to the server via this method.","summary":"<p>The <code><a href=\"../Redis/Pipeline.html#run(command)-instance-method\">#run</a></code> method is required by the <code><a href=\"../Redis/Commands.html\">Commands</a></code> mixin.</p>","abstract":false,"args":[{"name":"command","doc":null,"default_value":"","external_name":"command","restriction":""}],"args_string":"(command)","source_link":null,"def":{"name":"run","args":[{"name":"command","doc":null,"default_value":"","external_name":"command","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@connection.encode(command)\nfuture = Future.new\n@futures << future\nfuture\n"}}],"macros":[],"types":[]},{"html_id":"redis/Redis/Transaction","path":"Redis/Transaction.html","kind":"class","full_name":"Redis::Transaction","name":"Transaction","abstract":false,"superclass":{"html_id":"redis/Reference","kind":"class","full_name":"Reference","name":"Reference"},"ancestors":[{"html_id":"redis/Redis/Commands","kind":"module","full_name":"Redis::Commands","name":"Commands"},{"html_id":"redis/Reference","kind":"class","full_name":"Reference","name":"Reference"},{"html_id":"redis/Object","kind":"class","full_name":"Object","name":"Object"}],"locations":[],"repository_name":"redis","program":false,"enum":false,"alias":false,"aliased":"","const":false,"constants":[],"included_modules":[{"html_id":"redis/Redis/Commands","kind":"module","full_name":"Redis::Commands","name":"Commands"}],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"redis/Redis","kind":"module","full_name":"Redis","name":"Redis"},"doc":null,"summary":null,"class_methods":[],"constructors":[{"id":"new(connection:Connection)-class-method","html_id":"new(connection:Connection)-class-method","name":"new","doc":null,"summary":null,"abstract":false,"args":[{"name":"connection","doc":null,"default_value":"","external_name":"connection","restriction":"Connection"}],"args_string":"(connection : Connection)","source_link":null,"def":{"name":"new","args":[{"name":"connection","doc":null,"default_value":"","external_name":"connection","restriction":"Connection"}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"_ = allocate\n_.initialize(connection)\nif _.responds_to?(:finalize)\n  ::GC.add_finalizer(_)\nend\n_\n"}}],"instance_methods":[{"id":"discard:Nil-instance-method","html_id":"discard:Nil-instance-method","name":"discard","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Nil","source_link":null,"def":{"name":"discard","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"@discarded = true\nfinish(\"discard\")\n"}},{"id":"discarded?:Bool?-instance-method","html_id":"discarded?:Bool?-instance-method","name":"discarded?","doc":null,"summary":null,"abstract":false,"args":[],"args_string":" : Bool?","source_link":null,"def":{"name":"discarded?","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@discarded"}},{"id":"exec-instance-method","html_id":"exec-instance-method","name":"exec","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"exec","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"(finish(\"exec\")).as(Array)"}},{"id":"run(command):Nil-instance-method","html_id":"run(command):Nil-instance-method","name":"run","doc":"Execute the given command and return the result from the server. Commands\nmust be an `Enumerable` and its `size` method must be re-entrant.\n\n```\nrun({\"set\", \"foo\", \"bar\"})\n```","summary":"<p>Execute the given command and return the result from the server.</p>","abstract":false,"args":[{"name":"command","doc":null,"default_value":"","external_name":"command","restriction":""}],"args_string":"(command) : Nil","source_link":null,"def":{"name":"run","args":[{"name":"command","doc":null,"default_value":"","external_name":"command","restriction":""}],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"Nil","visibility":"Public","body":"if discarded?\n  return\nend\n@connection.encode(command)\n@command_count = @command_count + 1\n"}},{"id":"start!-instance-method","html_id":"start!-instance-method","name":"start!","doc":null,"summary":null,"abstract":false,"args":[],"args_string":"","source_link":null,"def":{"name":"start!","args":[],"double_splat":null,"splat_index":null,"yields":null,"block_arg":null,"return_type":"","visibility":"Public","body":"@connection.encode({\"multi\"})"}}],"macros":[],"types":[]},{"html_id":"redis/Redis/Value","path":"Redis/Value.html","kind":"alias","full_name":"Redis::Value","name":"Value","abstract":false,"superclass":null,"ancestors":[],"locations":[],"repository_name":"redis","program":false,"enum":false,"alias":true,"aliased":"(Array(Redis::Value) | Int64 | String | Nil)","const":false,"constants":[],"included_modules":[],"extended_modules":[],"subclasses":[],"including_types":[],"namespace":{"html_id":"redis/Redis","kind":"module","full_name":"Redis","name":"Redis"},"doc":"Values consumed and emitted by Redis can be strings, 64-bit integers, `nil`,\nor an array of any of these types.","summary":"<p>Values consumed and emitted by Redis can be strings, 64-bit integers, <code>nil</code>, or an array of any of these types.</p>","class_methods":[],"constructors":[],"instance_methods":[],"macros":[],"types":[]}]}]}}